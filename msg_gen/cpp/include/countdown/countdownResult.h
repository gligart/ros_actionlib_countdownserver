/* Auto-generated by genmsg_cpp for file /home/gipo/groovy_workspace/sandbox/countdown/msg/countdownResult.msg */
#ifndef COUNTDOWN_MESSAGE_COUNTDOWNRESULT_H
#define COUNTDOWN_MESSAGE_COUNTDOWNRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace countdown
{
template <class ContainerAllocator>
struct countdownResult_ {
  typedef countdownResult_<ContainerAllocator> Type;

  countdownResult_()
  : executed(false)
  {
  }

  countdownResult_(const ContainerAllocator& _alloc)
  : executed(false)
  {
  }

  typedef uint8_t _executed_type;
  uint8_t executed;


  typedef boost::shared_ptr< ::countdown::countdownResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::countdown::countdownResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct countdownResult
typedef  ::countdown::countdownResult_<std::allocator<void> > countdownResult;

typedef boost::shared_ptr< ::countdown::countdownResult> countdownResultPtr;
typedef boost::shared_ptr< ::countdown::countdownResult const> countdownResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::countdown::countdownResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::countdown::countdownResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace countdown

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::countdown::countdownResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::countdown::countdownResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::countdown::countdownResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5f7651dcb2efaa4301b1ab90dbc38874";
  }

  static const char* value(const  ::countdown::countdownResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5f7651dcb2efaa43ULL;
  static const uint64_t static_value2 = 0x01b1ab90dbc38874ULL;
};

template<class ContainerAllocator>
struct DataType< ::countdown::countdownResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "countdown/countdownResult";
  }

  static const char* value(const  ::countdown::countdownResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::countdown::countdownResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# result\n\
bool executed\n\
\n\
";
  }

  static const char* value(const  ::countdown::countdownResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::countdown::countdownResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::countdown::countdownResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.executed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct countdownResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::countdown::countdownResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::countdown::countdownResult_<ContainerAllocator> & v) 
  {
    s << indent << "executed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.executed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COUNTDOWN_MESSAGE_COUNTDOWNRESULT_H

