/* Auto-generated by genmsg_cpp for file /home/gipo/groovy_workspace/sandbox/countdown/msg/CountdownGoal.msg */
#ifndef COUNTDOWN_MESSAGE_COUNTDOWNGOAL_H
#define COUNTDOWN_MESSAGE_COUNTDOWNGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace countdown
{
template <class ContainerAllocator>
struct CountdownGoal_ {
  typedef CountdownGoal_<ContainerAllocator> Type;

  CountdownGoal_()
  : number(0)
  {
  }

  CountdownGoal_(const ContainerAllocator& _alloc)
  : number(0)
  {
  }

  typedef int32_t _number_type;
  int32_t number;


  typedef boost::shared_ptr< ::countdown::CountdownGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::countdown::CountdownGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CountdownGoal
typedef  ::countdown::CountdownGoal_<std::allocator<void> > CountdownGoal;

typedef boost::shared_ptr< ::countdown::CountdownGoal> CountdownGoalPtr;
typedef boost::shared_ptr< ::countdown::CountdownGoal const> CountdownGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::countdown::CountdownGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::countdown::CountdownGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace countdown

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::countdown::CountdownGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::countdown::CountdownGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::countdown::CountdownGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2474488a3908093ec1307bdd5b35815e";
  }

  static const char* value(const  ::countdown::CountdownGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2474488a3908093eULL;
  static const uint64_t static_value2 = 0xc1307bdd5b35815eULL;
};

template<class ContainerAllocator>
struct DataType< ::countdown::CountdownGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "countdown/CountdownGoal";
  }

  static const char* value(const  ::countdown::CountdownGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::countdown::CountdownGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal definition\n\
int32 number\n\
\n\
";
  }

  static const char* value(const  ::countdown::CountdownGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::countdown::CountdownGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::countdown::CountdownGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.number);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CountdownGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::countdown::CountdownGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::countdown::CountdownGoal_<ContainerAllocator> & v) 
  {
    s << indent << "number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COUNTDOWN_MESSAGE_COUNTDOWNGOAL_H

